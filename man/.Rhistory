?sieve
?sieve
?Sieve
??Sieve
?sieve_pr
X <- data.frame(a = as.factor(c('a','b','c','a')), Y = c(1,2,3,1))
as.matrix(X)
as.numeric(X)
as.numeric(X$a)
X <- data.frame(a = as.factor(c('a','b','c','c')), Y = c(1,2,3,3))
as.numeric(X$a)
as.numeric(X[1:3,]$a)
as.numeric(X[4,]$a)
X <- data.frame(f = as.factor(c('a','b','c','c')), Y = c(1,2,3,3))
as.numeric(X[4,]$f)
as.numeric(X[1:3,]$f)
xm <- as.matrix(X)
class(xm)
class(xm[,1])
class(xm[,2])
xm
sapply(X,unclass)
sapply(X[4,],unclass)
library(Sieve)
sapply(as.matrix(X),unclass)
dim(X)
#'
#' @return A list containing the necessary information for next step model fitting. Typically, the list is used as the main input of Sieve::sieve_solver.
#' \item{Phi}{a matrix. This is the design matrix directly used by the next step model fitting. The (i,j)-th element of this matrix is the evaluation of i-th sample's feature at the j-th basis function. The dimension of this matrix is sample size x basisN.}
#' \item{X}{a matrix. This is the rescaled original feature/predictor matrix.}
#' \item{type}{a string. The type of basis funtion.}
#' \item{index_matrix}{a matrix. It specifies what are the product basis functions used when constructing the design matrix Phi. It has a dimension basisN x dimension of original features. There are at most interaction_order many non-1 elements in each row.}
#' \item{basisN}{a number. Number of sieve basis functions.}
#' \item{norm_para}{a matrix. It records how each dimension of the feature/predictor is rescaled, which is useful when rescaling the testing sample's predictors.}
#' @export
#'
sieve_preprocess <- function(X, basisN = NULL, maxj = NULL,
type = 'sobolev1cos',
interaction_order = 3, index_matrix = NULL,
norm_feature = T, norm_para = NULL){
if(is.null(basisN)){
warning('user did not specify number of basis functions to use, default is xdim*5')
basisN <- NCOL(X)*50
} else if(basisN == 1){
stop('need to provide a larger basisN, you can start with xdim*5')
}
s.size <- dim(X)[1]
X <- sapply(X,unclass) #convert categorical variables into numeric variables
X <- as.matrix(X, nrow = s.size)
if(norm_feature){
norm_list <- normalize_X(X, norm_para)
X <- norm_list$X
norm_para <- norm_list$norm_para
}
xdim <- dim(X)[2]
# if(is.null(index_matrix)){
#   print("generating index list")
#   if(is.null(maxj)){
#     index_matrix <- as.matrix(create_index_matrix(xdim, basisN = basisN)[,-1], ncol = xdim)
#   }else{
#     index_matrix <- as.matrix(create_index_matrix(xdim, maxj = maxj)[,-1], ncol = xdim)
#   }
# }
index_matrix <- create_index_matrix(xdim = xdim,
basisN = basisN,
maxj = maxj,
interaction_order = interaction_order)
index_matrix <- index_matrix[,-1] #the first column in the product of indices of the corresponding row.
Phi <- Design_M_C(X, basisN, type, index_matrix)
return(list(Phi = Phi, X = X, type = type, index_matrix = index_matrix,
basisN = basisN, norm_para = norm_para))
}
