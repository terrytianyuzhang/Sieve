library(data.table)
library(ggplot2)
library(ggpubr)
normalize_PRS <- function(x){
x <- (x - mean(x))/ (sd(x))
return(x)
}
setwd('/Users/tianyu/Documents/ParaTuning/data/Different_overlap_percentage/')
# plot_list <- list()
fairness_data <- data.frame()
setting_index <- 1
current_overlap_percentage <- 60
print(current_overlap_percentage)
rawSimulationAUC <- readRDS(paste0('YRI-PGS-overlap-', current_overlap_percentage, '_2023-03-31.RDS'))
FDR_all_simulations <- data.table()
testing_population <- 'YRI'
repeat_index <- 0
repitition_name <- paste0('rep.', repeat_index)
raw_PRS_onesimulation <- data.table(rawSimulationAUC[[testing_population]][[repitition_name]])
raw_PRS_onesimulation <- melt(raw_PRS_onesimulation,
id.vars = c("ID", "PHENO"),
variable.name = "method",
value.name = "pgs_score")
raw_PRS_onesimulation[, PHENO:= factor(PHENO)]
raw_PRS_onesimulation[, is.case := as.numeric((PHENO == 2))]
raw_PRS_onesimulation[, pgs_score := normalize_PRS(pgs_score), by = "method"]
raw_PRS_onesimulation
raw_PRS_onesimulation <- data.table(rawSimulationAUC[[testing_population]][[repitition_name]])
raw_PRS_onesimulation <- melt(raw_PRS_onesimulation,
id.vars = c("ID", "PHENO"),
variable.name = "method",
value.name = "pgs_score")
raw_PRS_onesimulation
raw_PRS_onesimulation <- data.table(rawSimulationAUC[[testing_population]][[repitition_name]])
raw_PRS_onesimulation
library(Rcpp)
library(RcppArmadillo)
library(tictoc)
setwd('/Users/tianyu/Documents/SievePackage/')
setwd('/Users/tianyu/Documents/SievePackage/Sieve/src/')
source('/Users/tianyu/Documents/SievePackage/Sieve/R/SieveFittingModels.R')
# sourceCpp("PracticeRcppFunction.cpp")
sourceCpp('C_Functions.cpp')
# RcppArmadillo.package.skeleton('Sieve', cpp_files= '/Users/tianyu/Documents/SievePackage/', example_code = T)
RcppArmadillo.package.skeleton('Sieve', code_files = c('TensorProductFunction.R'))
# Now, move the cpp file into scr/
Rcpp::compileAttributes('Sieve')
devtools::document('Sieve')
library(Sieve)
library(Sieve)
