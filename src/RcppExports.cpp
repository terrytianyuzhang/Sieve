// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Generate_factors
List Generate_factors(int n, int dimlimit);
RcppExport SEXP _Sieve_Generate_factors(SEXP nSEXP, SEXP dimlimitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type dimlimit(dimlimitSEXP);
    rcpp_result_gen = Rcpp::wrap(Generate_factors(n, dimlimit));
    return rcpp_result_gen;
END_RCPP
}
// psicos
double psicos(double x, int j);
RcppExport SEXP _Sieve_psicos(SEXP xSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(psicos(x, j));
    return rcpp_result_gen;
END_RCPP
}
// psisin
double psisin(double x, int j);
RcppExport SEXP _Sieve_psisin(SEXP xSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(psisin(x, j));
    return rcpp_result_gen;
END_RCPP
}
// psipolytri
double psipolytri(double x, int j);
RcppExport SEXP _Sieve_psipolytri(SEXP xSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(psipolytri(x, j));
    return rcpp_result_gen;
END_RCPP
}
// psipoly
double psipoly(double x, int j);
RcppExport SEXP _Sieve_psipoly(SEXP xSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    rcpp_result_gen = Rcpp::wrap(psipoly(x, j));
    return rcpp_result_gen;
END_RCPP
}
// psi
double psi(double x, int j, String type);
RcppExport SEXP _Sieve_psi(SEXP xSEXP, SEXP jSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(psi(x, j, type));
    return rcpp_result_gen;
END_RCPP
}
// multi_psi
double multi_psi(arma::vec x, arma::vec index, String type);
RcppExport SEXP _Sieve_multi_psi(SEXP xSEXP, SEXP indexSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type index(indexSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(multi_psi(x, index, type));
    return rcpp_result_gen;
END_RCPP
}
// Kernel_M_C
List Kernel_M_C(arma::mat X, String type, double kernel_para);
RcppExport SEXP _Sieve_Kernel_M_C(SEXP XSEXP, SEXP typeSEXP, SEXP kernel_paraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type kernel_para(kernel_paraSEXP);
    rcpp_result_gen = Rcpp::wrap(Kernel_M_C(X, type, kernel_para));
    return rcpp_result_gen;
END_RCPP
}
// Design_M_C
arma::mat Design_M_C(arma::mat X, int basisN, String type, arma::mat index_matrix);
RcppExport SEXP _Sieve_Design_M_C(SEXP XSEXP, SEXP basisNSEXP, SEXP typeSEXP, SEXP index_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type basisN(basisNSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type index_matrix(index_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(Design_M_C(X, basisN, type, index_matrix));
    return rcpp_result_gen;
END_RCPP
}
// least_square_C
arma::vec least_square_C(arma::mat Phi, arma::vec Y);
RcppExport SEXP _Sieve_least_square_C(SEXP PhiSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(least_square_C(Phi, Y));
    return rcpp_result_gen;
END_RCPP
}
// crossprod_C
arma::vec crossprod_C(arma::mat Phi, arma::vec betahat);
RcppExport SEXP _Sieve_crossprod_C(SEXP PhiSEXP, SEXP betahatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type Phi(PhiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betahat(betahatSEXP);
    rcpp_result_gen = Rcpp::wrap(crossprod_C(Phi, betahat));
    return rcpp_result_gen;
END_RCPP
}
// KRR_cal_beta_C
arma::vec KRR_cal_beta_C(arma::mat U, arma::vec s, double lambda, arma::vec Y);
RcppExport SEXP _Sieve_KRR_cal_beta_C(SEXP USEXP, SEXP sSEXP, SEXP lambdaSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type U(USEXP);
    Rcpp::traits::input_parameter< arma::vec >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    rcpp_result_gen = Rcpp::wrap(KRR_cal_beta_C(U, s, lambda, Y));
    return rcpp_result_gen;
END_RCPP
}
// KRR_predict_C
arma::vec KRR_predict_C(arma::mat trainX, arma::mat testX, String type, arma::vec beta_hat, double kernel_para);
RcppExport SEXP _Sieve_KRR_predict_C(SEXP trainXSEXP, SEXP testXSEXP, SEXP typeSEXP, SEXP beta_hatSEXP, SEXP kernel_paraSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type trainX(trainXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type testX(testXSEXP);
    Rcpp::traits::input_parameter< String >::type type(typeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta_hat(beta_hatSEXP);
    Rcpp::traits::input_parameter< double >::type kernel_para(kernel_paraSEXP);
    rcpp_result_gen = Rcpp::wrap(KRR_predict_C(trainX, testX, type, beta_hat, kernel_para));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Sieve_Generate_factors", (DL_FUNC) &_Sieve_Generate_factors, 2},
    {"_Sieve_psicos", (DL_FUNC) &_Sieve_psicos, 2},
    {"_Sieve_psisin", (DL_FUNC) &_Sieve_psisin, 2},
    {"_Sieve_psipolytri", (DL_FUNC) &_Sieve_psipolytri, 2},
    {"_Sieve_psipoly", (DL_FUNC) &_Sieve_psipoly, 2},
    {"_Sieve_psi", (DL_FUNC) &_Sieve_psi, 3},
    {"_Sieve_multi_psi", (DL_FUNC) &_Sieve_multi_psi, 3},
    {"_Sieve_Kernel_M_C", (DL_FUNC) &_Sieve_Kernel_M_C, 3},
    {"_Sieve_Design_M_C", (DL_FUNC) &_Sieve_Design_M_C, 4},
    {"_Sieve_least_square_C", (DL_FUNC) &_Sieve_least_square_C, 2},
    {"_Sieve_crossprod_C", (DL_FUNC) &_Sieve_crossprod_C, 2},
    {"_Sieve_KRR_cal_beta_C", (DL_FUNC) &_Sieve_KRR_cal_beta_C, 4},
    {"_Sieve_KRR_predict_C", (DL_FUNC) &_Sieve_KRR_predict_C, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_Sieve(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
